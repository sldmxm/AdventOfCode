from unittest.mock import mock_open, patch

import pytest

from year_2019.year_2019_day_20 import (
    parse_portals,
    read_data,
    solve_part1,
    solve_part2,
)

TEST_DATA1 = """         A#########
         A#########
  #######.#########
  #######.........#
  #######.#######.#
  #######.#######.#
  #######.#######.#
  #####  B    ###.#
BC...##  C    ###.#
  ##.##       ###.#
  ##...DE  F  ###.#
  #####    G  ###.#
  #########.#####.#
DE..#######...###.#
  #.#########.###.#
FG..#########.....#
  ###########.#####
             Z#####
             Z#####
"""
TEST_DATA2 = """                   A###############
                   A###############
  #################.###############
  #.#...#...................#.#.###
  #.#.#.###.###.###.#########.#.###
  #.#.#.......#...#.....#.#.#...###
  #.#########.###.#####.#.#.###.###
  #.............#.#.....#.......###
  ###.###########.###.#####.#.#.###
  #.....#        A   C    #.#.#.###
  #######        S   P    #####.###
  #.#...#                 #......VT
  #.#.#.#                 #.#######
  #...#.#               YN....#.###
  #.###.#                 #####.###
DI....#.#                 #.....###
  #####.#                 #.###.###
ZZ......#               QG....#..AS
  ###.###                 #########
JO..#.#.#                 #.....###
  #.#.#.#                 ###.#.###
  #...#..DI             BU....#..LF
  #####.#                 #.#######
YN......#               VT..#....QG
  #.###.#                 #.###.###
  #.#...#                 #.....###
  ###.###    J L     J    #.#.#####
  #.....#    O F     P    #.#...###
  #.###.#####.#.#####.#####.###.###
  #...#.#.#...#.....#.....#.#...###
  #.#####.###.###.#.#.#########.###
  #...#.#.....#...#.#.#.#.....#.###
  #.###.#####.###.###.#.#.#########
  #.#.........#...#.............###
  #########.###.###.###############
           B   J   C###############
           U   P   P###############
"""
TEST_DATA3 = """#############Z#L#X#W#######C#################
#############Z#P#Q#B#######K#################
#############.#.#.#.#######.#################
###...#.......#.#.......#.#.......#.#.#...###
#####.#.#.#.#.#.#.#.###.#.#.#######.#.#.#####
###.#...#.#.#...#.#.#...#...#...#.#.......###
###.###.#######.###.###.#.###.###.#.#########
###...#.......#.#...#...#.............#...###
###.#########.#######.#.#######.#######.#####
###...#.#####F#######R#I#######Z#####.#.#.###
###.###.#####D#######E#C#######H#####.#.#.###
###.#...#############################...#.###
###.###.#############################.###.###
###.#....OA#######################WB..#.#..ZH
###.###.#############################.#.#.###
CJ......#############################.....###
#############################################
###.#....CK##########################......IC
###.###.#############################.###.###
###.....#############################...#.###
#####.###############################.#.#.###
XF....#.##########################RF..#.#.###
#######.#####################################
###......CJ#######################NM..#...###
#####.#.#############################.###.###
RE....#.#############################......RF
#####.###########X###X#######L#######.#.#.###
###.....#########F###Q#######P#######.#.#.###
#####.###########.###.#######.#########.#####
###.....#...#.....#.......#...#.....#.#...###
#######.#.###.#######.#######.###.###.#.#.###
###.......#.......#.#.#.#.#...#...#...#.#.###
#######.###.#####.#.#.#.#.###.###.#.###.#####
###.......#.....#.#...#...............#...###
###############.#.#.###.#####################
###############A#O#F###N#####################
###############A#A#D###M#####################
"""


@pytest.mark.parametrize(
    'mock_file_content, expected',
    [
        (
            TEST_DATA1,
            {
                'BC': [(8, 2), (6, 9)],
                'DE': [(10, 6), (13, 2)],
                'FG': [(15, 2), (12, 11)],
                'AA': [(2, 9)],
                'ZZ': [(16, 13)],
            },
        ),
    ],
)
def test_parse_portals(
    mock_file_content: str, expected: dict[str, list[tuple[int, int]]]
) -> None:
    with patch('builtins.open', mock_open(read_data=mock_file_content)):
        data = read_data('dummy_path.txt')
    assert parse_portals(data) == expected


@pytest.mark.parametrize(
    'mock_file_content, expected',
    [
        (TEST_DATA1, 23),
        (TEST_DATA2, 58),
    ],
)
def test_part1(mock_file_content: str, expected: int) -> None:
    with patch('builtins.open', mock_open(read_data=mock_file_content)):
        data = read_data('dummy_path.txt')
    assert solve_part1(data) == expected


@pytest.mark.parametrize(
    'mock_file_content, expected',
    [
        (TEST_DATA3, 396),
    ],
)
def test_part2(mock_file_content: str, expected: int) -> None:
    with patch('builtins.open', mock_open(read_data=mock_file_content)):
        data = read_data('dummy_path.txt')
    assert solve_part2(data) == expected
